version: 2.1

commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
          workflow-id:
              type: string
              default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
          - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force  
                    aws cloudformation delete-stack \
                        --stack-name "backend-stack-<< parameters.workflow-id >>"
                    aws cloudformation delete-stack \
                        --stack-name "frontend-stack-<< parameters.workflow-id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi

### Build Phase###
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

### Test Phase###

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Test job code
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm build
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Test job code
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm build
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

### Analyse Phase###

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Test job code
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Test job code
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical --force

### Infrastructure Phase###

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory. Getting it as an output from backend.yml script.
          command: |
            aws cloudformation \
                list-exports --query "Exports[?Name==\`backendIP\`].Value" \
                --no-paginate --output text >> .circleci/ansible/inventory.txt

      - run:
          name: Ensure inventory saved
          command: |
            ls ~/
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: alpine:latest
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["da:95:0f:a4:4a:71:0e:d4:f4:33:89:5b:24:57:76:99"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure inventory loaded
          command: |
            ls
            ls ~/
            pwd
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh
            ls

      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      
            # Here's where you will add some code to rollback on failure 
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - run:
          name: Run migrations
          # no_output_timeout: 10m
          command: |
            cd backend
            npm install
            echo "running migrations"
            npm run migrations > migrations.txt
            cat migrations.txt
            migration_status=$(cat migrations.txt | grep -c "has been executed successfully")
            if [ $migration_status = 1 ]; 
            then exit 0; 
            else exit 1; 
            fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: 2b869a61-8264-4f15-bf8b-f9174cfc9efc" --request PUT --data "1" \
             https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure   

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp --recursive frontend/dist "s3://udapeople-<< pipeline.parameters.workflow-id >>"
      - run:
          name: Echo S3 location (front-end)
          command: |
            echo "s3://udapeople-<< pipeline.parameters.workflow-id >>"
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["da:95:0f:a4:4a:71:0e:d4:f4:33:89:5b:24:57:76:99"]

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh && apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-eu-west-1.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl

      - run:
          name: Save old workflow ID
          command: |
              OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo $OldWorkflowID >> ~/OldWorkflowID.txt
              cat ~/OldWorkflowID.txt     
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople


      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id from memstash, get list of stack from 
          command: |
            # Get old workflow id
            export OldWorkflowID=$(curl -H "token: gajdulj" --request GET \
            https://api.memstash.io/values/persist_workflow_id)

            # Get stack list
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo "Old id ${OldWorkflowID}"
            echo "New id ${CIRCLE_WORKFLOW_ID:0:7}"
            echo ${STACKS}
      - run:
            name: Save current workflow id to memstash
            command: |
                curl -H "Content-Type: text/plain" \
                -H "token: gajdulj" \
                --request PUT --data "${CIRCLE_WORKFLOW_ID:0:7}" \
                https://api.memstash.io/values/persist_workflow_id
      - run:
            name: Remove old stacks and files
            command: |
                if [ "${OldWorkflowID}" != "" ]
                  then
                      aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                      aws cloudformation delete-stack \
                      --stack-name "backend-stack-${OldWorkflowID}"
                      aws cloudformation delete-stack \
                      --stack-name "frontend-stack-${OldWorkflowID}"
                  else
                      echo "This must be the first run, no old workflow id."  
                fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      # - scan-frontend:
          #requires: [test-frontend]
      # - scan-backend:
          #requires: [test-backend]
      - deploy-infrastructure 
          #requires: [scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]